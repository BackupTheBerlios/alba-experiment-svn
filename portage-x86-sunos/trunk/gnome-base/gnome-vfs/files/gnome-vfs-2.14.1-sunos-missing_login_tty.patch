--- libgnomevfs/gnome-vfs-pty.c.orig	Tue Nov 22 15:10:17 2005
+++ libgnomevfs/gnome-vfs-pty.c	Fri Apr 21 12:13:23 2006
@@ -307,6 +307,7 @@
 	}
 
 #ifdef HAVE_UTMP_H
+#if  !defined(MISSING_LOGIN_TTY)
 	/* This sets stdin, stdout, stderr to the socket */	
 	if (login && login_tty (fd) == -1) {
 		g_printerr ("mount child process login_tty failed: %s\n", strerror (errno));
@@ -313,6 +314,7 @@
 		return -1;
 	}
 #endif
+#endif
 	
 	/* Signal to the parent that we've finished setting things up by
 	 * sending an arbitrary byte over the status pipe and waiting for
@@ -629,6 +631,7 @@
 static char *
 _gnome_vfs_pty_ptsname(int master)
 {
+#ifndef __APPLE__
 #if defined(HAVE_PTSNAME_R)
 	gsize len = 1024;
 	char *buf = NULL;
@@ -674,6 +677,7 @@
 		return g_strdup_printf("/dev/pts/%d", pty);
 	}
 #endif
+#endif /* __APPLE__ */
 	return NULL;
 }
 
@@ -681,10 +685,10 @@
 _gnome_vfs_pty_getpt(void)
 {
 	int fd, flags;
-#ifdef HAVE_GETPT
+#if defined(HAVE_GETPT) && !defined(__APPLE__)
 	/* Call the system's function for allocating a pty. */
 	fd = getpt();
-#elif defined(HAVE_POSIX_OPENPT)
+#elif defined(HAVE_POSIX_OPENPT) && !defined(__APPLE__)
 	fd = posix_openpt(O_RDWR | O_NOCTTY);
 #else
 	/* Try to allocate a pty by accessing the pty master multiplex. */
@@ -703,7 +707,7 @@
 static int
 _gnome_vfs_pty_grantpt(int master)
 {
-#ifdef HAVE_GRANTPT
+#if defined(HAVE_GRANTPT) && !defined(__APPLE__)
 	return grantpt(master);
 #else
 	return 0;
@@ -713,6 +717,9 @@
 static int
 _gnome_vfs_pty_unlockpt(int fd)
 {
+#ifdef __APPLE__
+	return -1;
+#else
 #ifdef HAVE_UNLOCKPT
 	return unlockpt(fd);
 #elif defined(TIOCSPTLCK)
@@ -721,6 +728,7 @@
 #else
 	return -1;
 #endif
+#endif
 }
 
 static int
