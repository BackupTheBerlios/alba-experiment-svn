#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use lib '/usr/share/alba-experiment/lib';
use PortageUtils;
$Term::ANSIColor::AUTORESET = 1;


my $opt_last;
my $opt_f;
my $opt_n;
my $opt_nb;
my $opt_auto;
my $opt_ne;
my $BASE_PORTDIR=`portageq portdir`;
my $OVER_PORTDIRS="$ENV{'AEOVERLAY'}";
chomp $BASE_PORTDIR;

die "You must set AEOVERLAY environment variable." unless ($OVER_PORTDIRS);

GetOptions(
	"last" => \$opt_last,
	"filter=s" => \$opt_f,
	"non-interactive" => \$opt_n,
	"auto" => \$opt_auto,
	"no-emerge" => \$opt_ne
	);

sub fkeyword($){

	my $eb=shift;
	open(EB,"$eb")|| die "can't open file: $!";
	while (my $l=<EB>){
		next unless $l=~/^KEYWORDS=(.*)$/;
		return "$1";
	}
	close(EB);
};

my $pkg=$ARGV[0];
chomp $pkg;
# detect esearch

if ($pkg !~ m:/:){
	if ( -f "/usr/bin/esearch"){
		my @mypkg=split(' ',`esearch -c --own='%p ' "^$pkg\$"`);
		$pkg=$mypkg[0];
		chomp $pkg;
		if (($#mypkg gt 0)){
			print "Multiple matches found (\+$#mypkg): using $pkg\n";
		}
	}
}

my ($cat,$name)=split('/',$pkg);
die "Package not found: you must specify a category/package name." unless defined($cat);
my %ep;
my %eo;
my %kp;
my %ko;
if (-d "$BASE_PORTDIR/$pkg"){
	opendir(BPD,"$BASE_PORTDIR/$pkg") || die "can't open dir: $!";
	foreach (grep { /ebuild/ } readdir(BPD)){
		$ep{$_}="$BASE_PORTDIR";
		$kp{$_}=fkeyword("$BASE_PORTDIR/$pkg/$_");
	}
	closedir(BPD);
}
for my $OVER_PORTDIR (split(' ',$OVER_PORTDIRS)){
	chomp $OVER_PORTDIR;
	if (-d "$OVER_PORTDIR/$pkg"){
		opendir(OPD,"$OVER_PORTDIR/$pkg") || die "can't open dir: $!";
		foreach (grep { /ebuild/ } readdir(OPD)){
			$eo{$_}="$OVER_PORTDIR";
			$ko{$_}=fkeyword("$OVER_PORTDIR/$pkg/$_");
		}
		closedir(OPD);
	}
}
my $i=1;
my @a;
print CYAN, "$BASE_PORTDIR\n", CLEAR;
my $y=$BASE_PORTDIR;
foreach my $x (sort pkg_sort map {/^(.*).ebuild/;$1}	keys %ep){
	my $K = $kp{$x.".ebuild"};
	$x =~ s/\.ebuild$//;
	if (!defined($opt_f) || ($K=~/ $opt_f[ |"]/)){
		print " [$i] ";
		print BOLD, GREEN, "$cat/$x ";
		print RESET, "[$K]\n" 
	}
	push @a,"$cat/$x $y";
	$i++;
}
print "\n";
my $num=$i-1;
if ($opt_auto){
}
else {
	print CYAN, "$OVER_PORTDIRS", CLEAR , "\n";
	foreach my $x (sort pkg_sort map {/^(.*).ebuild/;$1}	keys %eo){
		my $y = $eo{$x.".ebuild"};
		my $K = $ko{$x.".ebuild"};
		$x =~ s/\.ebuild$//;
		if (!defined($opt_f) || ($K=~/ $opt_f[ |"]/)){
			print " [$i] ";
			print BOLD, GREEN, "$cat/$x ";
			print RESET, "[$K]\n" 
		}
		push @a,"$cat/$x $y";
		$i++;
	}
	print "\n";
	exit if $opt_n;
	print BOLD, WHITE, "Do you want to add an ebuild to the tree? Give a number: ", CLEAR;
	$num=<STDIN>;
	chomp $num;
	#print "a=@a\n";
	#print "num=$num i=$i\n";
	#print "a[num]=$a[$num-1]\n";
	#print "num defined\n" if defined($num);
	#print "num gt 0\n" if $num gt 0;
	#print "num lt i\n" if $num < $i;
}
if ((defined($num)) && ($num =~ /^\d*$/) && ($num-1 ge 0) && ($num-1 < $i)){
        print BOLD,YELLOW "Adding [$num] $a[$num-1]...\n", CLEAR;
		if ($opt_ne || $opt_auto){
        	exec ("ae-add-ebuild $a[$num-1] --no-emerge") or print STDERR "couldn't exec ae-add-ebuild $!"
		} else {
        	exec ("ae-add-ebuild $a[$num-1]") or print STDERR "couldn't exec ae-add-ebuild $!"
		}
}
else {
        print "No package selected\n";
}

